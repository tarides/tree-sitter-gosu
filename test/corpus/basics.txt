===========
Empty class
===========

class Foo {}

---

(start
  (gClass
    name: (id)
    body: (classBody)))

=================
Field declaration
=================

class Foo {
  var bar
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (fieldDefn
            (id)))))))

====================
Field Initialization
====================

class Foo {
  var bar = "bar"
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (fieldDefn
            (id)
            value: (StringLiteral)))))))

=========
Modifiers
=========

public class Foo {
  private var bar
}

---

(start
  (modifiers)
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (fieldDefn
            (modifiers)
            (id)))))))

============
Line Comment
============

// This is a line comment
class Foo {}

---

(start
  (LINE_COMMENT)
  (gClass
    name: (id)
    body: (classBody)))

=============
Block Comment
=============

/* This is the first line of a multiline comment
   The comment continues on this line.
   This is the last line. */
class Foo {}

---

(start
  (COMMENT)
  (gClass
    name: (id)
    body: (classBody)))

==========
Field Type
==========

class Foo {
  var bar : String = "bar"
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (fieldDefn
            (id)
            type: (type
              (type_identifier))
            value: (StringLiteral)))))))

==========
Properties
==========

class Foo {
  var bar : String as Bar = "bar"
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (fieldDefn
            (id)
            type: (type
              (type_identifier))
            as: (id)
            value: (StringLiteral)))))))

===================
Package Declaration
===================

package foo;

class Foo {}

---

(start
  (namespaceStatement
    (id))
  (gClass
    name: (id)
    body: (classBody)))

============================
Compound Package Declaration
============================

package foo.bar;

class Foo {}

---

(start
  (namespaceStatement
    (id)
    (id))
  (gClass
    name: (id)
    body: (classBody)))

===============
Uses Statements
===============

uses foo;
uses bar.bar;
uses foo.bar.*;

class Foo {}

---

(start
  (usesStatement
    (id))
  (usesStatement
    (id)
    (id))
  (usesStatement
    (id)
    (id))
  (gClass
    name: (id)
    body: (classBody)))

==================
Function Signature
==================

class Foo {
    function foo()
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (functionDefn
            (id)))))))

========================
Local Variable Statement
========================

class Foo {
    function foo() {
        var foo = "Bar"
    }
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (functionDefn
            (id)
            (statement
              (localVarStatement
                (id)
                value: (StringLiteral)))))))))

===========
Method Call
===========

class Foo {
    function foo() {
        bar()
        baz.qux("arg")
    }
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (functionDefn
            (id)
            (statement
              (assignmentOrMethodCall
                (id)
                (indirectMemberAccess1)))
            (statement
              (assignmentOrMethodCall
                (id)
                (indirectMemberAccess1
                  (id))
                (indirectMemberAccess1
                  (StringLiteral))))))))))

===================
Additive Expression
===================

class Foo {
    function foo() {
        var bar = "baz" + "qux"
    }
}

---

(start
  (gClass
    name: (id)
    body: (classBody
      (classMembers
        (declaration
          (functionDefn
            (id)
            (statement
              (localVarStatement
                (id)
                value: (additiveExpr
                  (StringLiteral)
                  (additiveOp)
                  (StringLiteral))))))))))
